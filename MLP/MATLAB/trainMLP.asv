% MATLAB function to train an MLP to fit VERDICT model
% Function calls python script to train and export MLP model
function trainMLP(modeltype, schemename, opts)


arguments
    
    modeltype % Define model type
    schemename % Define scheme
    
    % Options

    % Language to configure MLP network in
    opts.configure = 'python'
    
    % Noise
    opts.noisetype = 'Rice'
    opts.sigma0train = 0.025 % 
    opts.T2train = 10000 % (ms) 


    % MLP Architecture
    opts.Nlayer = 3
    opts.Nnode = 150
    
    % MLP training
    opts.batchsize = 100

    % Files
    opts.pythonfolder = 'C:\Users\adam\OneDrive - University College London\UCL PhD\PhD Year 1\Projects\Short VERDICT Project\Code\Short-VERDICT-Project\Model Fitting\MLP\Python'
    opts.TrainDataFolder = 'C:\Users\adam\OneDrive - University College London\UCL PhD\PhD Year 1\Projects\Short VERDICT Project\Code\Short-VERDICT-Project\Model Fitting\MLP\Training Data'
    opts.ModelFolder = 'C:\Users\adam\OneDrive - University College London\UCL PhD\PhD Year 1\Projects\Short VERDICT Project\Code\Short-VERDICT-Project\Model Fitting\MLP\MLP Models'


end


switch opts.configure

    case 'python'
        
        % Call python script to train mlp
        pyfname = [opts.pythonfolder '/trainMLP.py' ];
        
        pyrunfile(pyfname, ...
            modeltype = modeltype, ...
            schemename = schemename, ...
            noisetype = opts.noisetype,...
            sigma0train = opts.sigma0train,...
            T2train = opts.T2train,...
            Nlayer = opts.Nlayer, ...
            Nnode = opts.Nnode, ...
            batchsize = opts.batchsize, ...
            TrainDataFolder = opts.TrainDataFolder, ...
            ModelFolder = opts.ModelFolder...
            );


    % Configure MLP network in MATLAB
    case 'MATLAB'

        % Edit model folder
        opts.ModelFolder = [opts.ModelFolder '/MATLAB'];

        % == Load training data

        load([opts.TrainDataFolder '/' modeltype '/' schemename '/' opts.noisetype '/T2_' num2str(opts.T2train) '/sigma_' num2str(opts.sigma0train) '/Meta.mat']);
        load([opts.TrainDataFolder '/' modeltype '/' schemename '/' opts.noisetype '/T2_' num2str(opts.T2train) '/sigma_' num2str(opts.sigma0train) '/params.mat']);
        load([opts.TrainDataFolder '/' modeltype '/' schemename '/' opts.noisetype '/T2_' num2str(opts.T2train) '/sigma_' num2str(opts.sigma0train) '/signals.mat']);

        % Scale data
        [scaledSignals, minSignal, maxSignal] = minmaxscale(Signals);
        signalScales
        [scaledParams, minParams, maxParams] = minmaxscale(params);

        % == Configure network

        net = dlnetwork;

        % Sizes of layers
        Ninput = size(Signals, 2);
        Noutput = size(params, 2);

        % Define layers
        HiddenLayer = [fullyConnectedLayer(opts.Nnode), reluLayer];
        HiddenLayers = repmat(HiddenLayer, 1, opts.Nlayer);

        layers = [ ...
            sequenceInputLayer(Ninput),...
            HiddenLayers,...
            fullyConnectedLayer(Noutput)
            ] ;

        net = addLayers(net,layers) ;

        % == Training options
        options = trainingOptions( ...
            "adam", ...
            MaxEpochs=1000, ...
            Verbose=false, ...
            Plots="training-progress", ...
            Metrics="rmse",...
            LearnRateSchedule='none');

        lossFcn = "l2loss" ; % Loss between true and predicted LWF 

        % == Apply training
        [mlp, info] = trainnet(scaledSignals, scaledParams, net, lossFcn, options);


        % == Save MLP and scaling information
        save([opts.ModelFolder '/' modeltype '/' schemename '/' opts.noisetype '/T2_' num2str(opts.T2train) '/sigma_' num2str(opts.sigma0train) '/mlp.mat'], "mlp");
        



end


%% META data

load([char(opts.TrainDataFolder) '/' modeltype '/' schemename '/' opts.noisetype '/T2_' num2str(opts.T2train) '/sigma_' num2str(opts.sigma0train) '/Meta.mat'])


FitMeta = struct();
FitMeta.train_complete_time = datetime();
FitMeta.TrainingDataMeta = Meta;
FitMeta.Nlayer = opts.Nlayer;
FitMeta.Nnode = opts.Nnode;
FitMeta.batchsize = opts.batchsize;


save([char(opts.ModelFolder) '/' modeltype '/' schemename '/' opts.noisetype '/T2_' num2str(opts.T2train) '/sigma_' num2str(opts.sigma0train) '/Meta.mat'], 'FitMeta');




end


% Min Max scaler function
function [scaledData, minVal, maxVal] = minmaxscale(data)
    % Get the minimum and maximum values
    minVal = min(data);
    maxVal = max(data);
    
    % Scale the data to the range [0, 1]
    scaledData = (data - minVal) ./ (maxVal - minVal);
end